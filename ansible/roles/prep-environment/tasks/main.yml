- name: Set the hostname
  ansible.builtin.hostname:
    name: "{{ HOSTNAME }}.{{ DOMAINNAME }}"

- name: Add {{ HOSTNAME }} {{ HOSTNAME }}.{{ DOMAINNAME }} to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.0\.1'
    line: "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 {{ HOSTNAME }} {{ HOSTNAME }}.{{ DOMAINNAME }}"
    owner: root
    group: root
    mode: 0644

- name: Add dns entries to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ item }}"
  with_items: 
    - "192.168.122.1 {{ REGISTRYNAME }} {{ REGISTRYNAME }}.{{ DOMAINNAME }} {{ KSSERVER }} {{ KSSERVER }}.{{ DOMAINNAME }}  {{ REPONAME }} {{ REPONAME }}.{{ DOMAINNAME }} {{ SERVERNAME }} {{ SERVERNAME }}.{{ DOMAINNAME }} {{ GITNAME }} {{ GITNAME }}.{{ DOMAINNAME }} {{ APPNAME }} {{ APPNAME }}.{{ DOMAINNAME }}"
    - "10.11.12.101 packagemode packagemode.{{ DOMAINNAME }}"
    - "10.11.12.102 imagemode imagemode.{{ DOMAINNAME }}"
    - "10.11.12.103 appserver appserver.{{ DOMAINNAME }}"
    - "10.11.12.104 pipeline pipeline.{{ DOMAINNAME }}"
    - "10.11.12.105 aap aap.{{ DOMAINNAME }}"
   
- name: Install packages
  ansible.builtin.yum:
    name: "{{ rpm_packages }}"
  vars:
    rpm_packages:
    - "@Virtualization Host"
    - virt-manager
    - virt-install
    - nginx
    - php
    - podman
    - syslinux-tftpboot

- name: Enable firewall
  ansible.builtin.systemd_service:
    state: started
    enabled: true
    name: firewalld

- name: Enable libvirtd
  ansible.builtin.systemd_service:
    state: started
    enabled: true
    name: libvirtd

- name: Enable and start dnsmasq
  ansible.builtin.systemd_service:
    name: dnsmasq
    enabled: true
    state: started

- name: Enable and start nginx
  ansible.builtin.systemd_service:
    name: nginx
    enabled: true
    state: started

- name: Check capabilities of newuidmap
  community.general.capabilities:
    path: /usr/bin/newuidmap
    capability: cap_setuid+ep
    state: present

- name: Check capabilities of newgidmap
  community.general.capabilities:
    path: /usr/bin/newgidmap
    capability: cap_setgid+ep
    state: present

#- name: Define imnet libvirt network
#  community.libvirt.virt_net:
#    command: define
#    name: imnet
#    xml: '{{ lookup("template", "{{ playbook_dir }}/roles/prep-environment/files/imnet.xml") }}'
#  delegate_to: localhost
  
#- name: Start imnet libvirt network
#  community.libvirt.virt_net:
#    command: start
#    name: imnet
#    autostart: true

- name: Copy imnet.xml to /tmp
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/roles/prep-environment/files/imnet.xml"
    dest: /tmp/imnet.xml
    owner: root
    group: root
    mode: '0644'

- name: Define imnet libvirt network
  ansible.builtin.command:
    cmd: virsh net-define /tmp/imnet.xml
  args:
    creates: /etc/libvirt/qemu/networks/imnet.xml
  become: true
  changed_when: false
  
- name: Start imnet libvirt network
  ansible.builtin.command:
    cmd: virsh net-start imnet
  become: true
  ignore_errors: true # Figure out some way to test if it's already started

- name: Start imnet libvirt network automatically on boot
  ansible.builtin.command:
    cmd: virsh net-autostart imnet
  become: true

- name: Copy the example.com CA rpm to /tmp
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/roles/prep-environment/files/example.com-root-ca-20240701-1.noarch.rpm"
    dest: /tmp/example.com-root-ca-20240701-1.noarch.rpm
    owner: root
    group: root
    mode: '0644'

- name: Install the example.com CA rpm so we can push to the registry
  ansible.builtin.yum:
    name: /tmp/example.com-root-ca-20240701-1.noarch.rpm
    disable_gpg_check: yes